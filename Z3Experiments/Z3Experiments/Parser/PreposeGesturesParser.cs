//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\work\SurroundWeb\private\AROS\GestureRecognizerKinectV2\\Z3Experiments\Z3Experiments\Parser\PreposeGestures.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreposeGestures {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PreposeGesturesParser : Antlr4.Runtime.Parser {
	public const int
		T__76=1, T__75=2, T__74=3, T__73=4, T__72=5, T__71=6, T__70=7, T__69=8, 
		T__68=9, T__67=10, T__66=11, T__65=12, T__64=13, T__63=14, T__62=15, T__61=16, 
		T__60=17, T__59=18, T__58=19, T__57=20, T__56=21, T__55=22, T__54=23, 
		T__53=24, T__52=25, T__51=26, T__50=27, T__49=28, T__48=29, T__47=30, 
		T__46=31, T__45=32, T__44=33, T__43=34, T__42=35, T__41=36, T__40=37, 
		T__39=38, T__38=39, T__37=40, T__36=41, T__35=42, T__34=43, T__33=44, 
		T__32=45, T__31=46, T__30=47, T__29=48, T__28=49, T__27=50, T__26=51, 
		T__25=52, T__24=53, T__23=54, T__22=55, T__21=56, T__20=57, T__19=58, 
		T__18=59, T__17=60, T__16=61, T__15=62, T__14=63, T__13=64, T__12=65, 
		T__11=66, T__10=67, T__9=68, T__8=69, T__7=70, T__6=71, T__5=72, T__4=73, 
		T__3=74, T__2=75, T__1=76, T__0=77, NUMBER=78, DIGIT=79, COMMENT=80, ID=81, 
		WS=82;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'left'", "'shoulders'", "'your'", "'down'", "'behind'", 
		"'clockwise'", "'hand'", "'neck'", "'arm'", "'to'", "'following'", "'hold'", 
		"'times'", "'elbow'", "'feet'", "'on'", "'EXECUTION'", "'ankle'", "'head'", 
		"'wrists'", "'seconds'", "'foot'", "'GESTURE'", "'steps'", "'repeat'", 
		"'rotate'", "'shoulder'", "'up'", "'frontal'", "'back'", "'legs'", "'horizontal'", 
		"'knee'", "'APP'", "'degrees'", "'spine'", "'arms'", "'in'", "'rapidly'", 
		"','", "'of'", "':'", "'slowly'", "'put'", "'thumbs'", "'mid'", "'POSE'", 
		"'tip'", "'and'", "'align'", "'hands'", "'don't'", "'wrist'", "'.'", "'you'", 
		"'the'", "'sagittal'", "'for'", "'leg'", "'knees'", "'hip'", "'base'", 
		"'elbows'", "'ankles'", "'above'", "'with'", "'front'", "'touch'", "'top'", 
		"'below'", "'hips'", "'right'", "'plane'", "'thumb'", "'tips'", "'counter'", 
		"'point'", "NUMBER", "DIGIT", "COMMENT", "ID", "WS"
	};
	public const int
		RULE_app = 0, RULE_gesture = 1, RULE_pose = 2, RULE_statement = 3, RULE_transform = 4, 
		RULE_rotate_plane_transform = 5, RULE_rotate_direction_transform = 6, 
		RULE_point_to_transform = 7, RULE_body_part = 8, RULE_arm = 9, RULE_leg = 10, 
		RULE_spine = 11, RULE_back = 12, RULE_arms = 13, RULE_legs = 14, RULE_shoulders = 15, 
		RULE_wrists = 16, RULE_elbows = 17, RULE_hands = 18, RULE_hands_tips = 19, 
		RULE_thumbs = 20, RULE_hips = 21, RULE_knees = 22, RULE_ankles = 23, RULE_feet = 24, 
		RULE_you = 25, RULE_joint = 26, RULE_center_joint = 27, RULE_side = 28, 
		RULE_sided_joint = 29, RULE_direction = 30, RULE_angular_direction = 31, 
		RULE_reference_plane = 32, RULE_restriction = 33, RULE_dont = 34, RULE_touch_restriction = 35, 
		RULE_put_restriction = 36, RULE_align_restriction = 37, RULE_relative_direction = 38, 
		RULE_execution = 39, RULE_execution_step = 40, RULE_motion_constraint = 41, 
		RULE_hold_constraint = 42, RULE_repeat = 43;
	public static readonly string[] ruleNames = {
		"app", "gesture", "pose", "statement", "transform", "rotate_plane_transform", 
		"rotate_direction_transform", "point_to_transform", "body_part", "arm", 
		"leg", "spine", "back", "arms", "legs", "shoulders", "wrists", "elbows", 
		"hands", "hands_tips", "thumbs", "hips", "knees", "ankles", "feet", "you", 
		"joint", "center_joint", "side", "sided_joint", "direction", "angular_direction", 
		"reference_plane", "restriction", "dont", "touch_restriction", "put_restriction", 
		"align_restriction", "relative_direction", "execution", "execution_step", 
		"motion_constraint", "hold_constraint", "repeat"
	};

	public override string GrammarFileName { get { return "PreposeGestures.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreposeGesturesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class AppContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreposeGesturesParser.Eof, 0); }
		public ITerminalNode ID() { return GetToken(PreposeGesturesParser.ID, 0); }
		public GestureContext gesture(int i) {
			return GetRuleContext<GestureContext>(i);
		}
		public IReadOnlyList<GestureContext> gesture() {
			return GetRuleContexts<GestureContext>();
		}
		public AppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_app; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterApp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitApp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppContext app() {
		AppContext _localctx = new AppContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_app);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(34);
			State = 89; Match(ID);
			State = 90; Match(42);
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 91; gesture();
				State = 92; Match(54);
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==23 );
			State = 98; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GestureContext : ParserRuleContext {
		public PoseContext pose(int i) {
			return GetRuleContext<PoseContext>(i);
		}
		public IReadOnlyList<PoseContext> pose() {
			return GetRuleContexts<PoseContext>();
		}
		public ITerminalNode ID() { return GetToken(PreposeGesturesParser.ID, 0); }
		public ExecutionContext execution() {
			return GetRuleContext<ExecutionContext>(0);
		}
		public GestureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gesture; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterGesture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitGesture(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGesture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GestureContext gesture() {
		GestureContext _localctx = new GestureContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_gesture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(23);
			State = 101; Match(ID);
			State = 102; Match(42);
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 103; pose();
				}
				}
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==47 );
			State = 108; execution();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PoseContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ITerminalNode ID() { return GetToken(PreposeGesturesParser.ID, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public PoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pose; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterPose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitPose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PoseContext pose() {
		PoseContext _localctx = new PoseContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_pose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(47);
			State = 111; Match(ID);
			State = 112; Match(42);
			State = 113; statement();
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==40) {
				{
				{
				State = 114; Match(40);
				State = 115; statement();
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 121; Match(54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public RestrictionContext restriction() {
			return GetRuleContext<RestrictionContext>(0);
		}
		public TransformContext transform() {
			return GetRuleContext<TransformContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 125;
			switch (_input.La(1)) {
			case 26:
			case 77:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; transform();
				}
				break;
			case 44:
			case 50:
			case 52:
			case 68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; restriction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		public Rotate_direction_transformContext rotate_direction_transform() {
			return GetRuleContext<Rotate_direction_transformContext>(0);
		}
		public Rotate_plane_transformContext rotate_plane_transform() {
			return GetRuleContext<Rotate_plane_transformContext>(0);
		}
		public Point_to_transformContext point_to_transform() {
			return GetRuleContext<Point_to_transformContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_transform; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_transform);
		try {
			State = 130;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; point_to_transform();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; rotate_plane_transform();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; rotate_direction_transform();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rotate_plane_transformContext : ParserRuleContext {
		public IReadOnlyList<Body_partContext> body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		public Angular_directionContext angular_direction() {
			return GetRuleContext<Angular_directionContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PreposeGesturesParser.NUMBER, 0); }
		public Reference_planeContext reference_plane() {
			return GetRuleContext<Reference_planeContext>(0);
		}
		public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public Rotate_plane_transformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rotate_plane_transform; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterRotate_plane_transform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitRotate_plane_transform(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotate_plane_transform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rotate_plane_transformContext rotate_plane_transform() {
		Rotate_plane_transformContext _localctx = new Rotate_plane_transformContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_rotate_plane_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(26);
			State = 133; Match(3);
			State = 134; body_part();
			State = 150;
			_la = _input.La(1);
			if (_la==40 || _la==49) {
				{
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 135; Match(40);
					State = 137;
					_la = _input.La(1);
					if (_la==3) {
						{
						State = 136; Match(3);
						}
					}

					State = 139; body_part();
					}
					}
					State = 144;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 145; Match(49);
				State = 147;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 146; Match(3);
					}
				}

				State = 149; body_part();
				}
			}

			State = 152; Match(NUMBER);
			State = 153; Match(35);
			State = 154; angular_direction();
			State = 155; Match(16);
			State = 157;
			_la = _input.La(1);
			if (_la==56) {
				{
				State = 156; Match(56);
				}
			}

			State = 159; reference_plane();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rotate_direction_transformContext : ParserRuleContext {
		public IReadOnlyList<Body_partContext> body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PreposeGesturesParser.NUMBER, 0); }
		public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public Rotate_direction_transformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rotate_direction_transform; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterRotate_direction_transform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitRotate_direction_transform(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotate_direction_transform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rotate_direction_transformContext rotate_direction_transform() {
		Rotate_direction_transformContext _localctx = new Rotate_direction_transformContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_rotate_direction_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(26);
			State = 162; Match(3);
			State = 163; body_part();
			State = 179;
			_la = _input.La(1);
			if (_la==40 || _la==49) {
				{
				State = 171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 164; Match(40);
					State = 166;
					_la = _input.La(1);
					if (_la==3) {
						{
						State = 165; Match(3);
						}
					}

					State = 168; body_part();
					}
					}
					State = 173;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 174; Match(49);
				State = 176;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 175; Match(3);
					}
				}

				State = 178; body_part();
				}
			}

			State = 181; Match(NUMBER);
			State = 182; Match(35);
			State = 186;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 183; Match(10);
				}
				break;

			case 2:
				{
				State = 184; Match(10);
				State = 185; Match(3);
				}
				break;
			}
			State = 188; direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Point_to_transformContext : ParserRuleContext {
		public IReadOnlyList<Body_partContext> body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public Point_to_transformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_point_to_transform; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterPoint_to_transform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitPoint_to_transform(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint_to_transform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Point_to_transformContext point_to_transform() {
		Point_to_transformContext _localctx = new Point_to_transformContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_point_to_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(77);
			State = 192;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 191; Match(3);
				}
			}

			State = 194; body_part();
			State = 210;
			_la = _input.La(1);
			if (_la==40 || _la==49) {
				{
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 195; Match(40);
					State = 197;
					_la = _input.La(1);
					if (_la==3) {
						{
						State = 196; Match(3);
						}
					}

					State = 199; body_part();
					}
					}
					State = 204;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 205; Match(49);
				State = 207;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 206; Match(3);
					}
				}

				State = 209; body_part();
				}
			}

			State = 215;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 212; Match(10);
				}
				break;

			case 2:
				{
				State = 213; Match(10);
				State = 214; Match(3);
				}
				break;
			}
			State = 217; direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_partContext : ParserRuleContext {
		public LegsContext legs() {
			return GetRuleContext<LegsContext>(0);
		}
		public WristsContext wrists() {
			return GetRuleContext<WristsContext>(0);
		}
		public KneesContext knees() {
			return GetRuleContext<KneesContext>(0);
		}
		public FeetContext feet() {
			return GetRuleContext<FeetContext>(0);
		}
		public ThumbsContext thumbs() {
			return GetRuleContext<ThumbsContext>(0);
		}
		public JointContext joint() {
			return GetRuleContext<JointContext>(0);
		}
		public ShouldersContext shoulders() {
			return GetRuleContext<ShouldersContext>(0);
		}
		public ArmContext arm() {
			return GetRuleContext<ArmContext>(0);
		}
		public BackContext back() {
			return GetRuleContext<BackContext>(0);
		}
		public HandsContext hands() {
			return GetRuleContext<HandsContext>(0);
		}
		public HipsContext hips() {
			return GetRuleContext<HipsContext>(0);
		}
		public YouContext you() {
			return GetRuleContext<YouContext>(0);
		}
		public ElbowsContext elbows() {
			return GetRuleContext<ElbowsContext>(0);
		}
		public AnklesContext ankles() {
			return GetRuleContext<AnklesContext>(0);
		}
		public SpineContext spine() {
			return GetRuleContext<SpineContext>(0);
		}
		public Hands_tipsContext hands_tips() {
			return GetRuleContext<Hands_tipsContext>(0);
		}
		public LegContext leg() {
			return GetRuleContext<LegContext>(0);
		}
		public ArmsContext arms() {
			return GetRuleContext<ArmsContext>(0);
		}
		public Body_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_body_part; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterBody_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitBody_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_partContext body_part() {
		Body_partContext _localctx = new Body_partContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_body_part);
		try {
			State = 237;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; joint();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; arm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221; leg();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 222; spine();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 223; back();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 224; arms();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 225; legs();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 226; shoulders();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 227; wrists();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 228; elbows();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 229; hands();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 230; hands_tips();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 231; thumbs();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 232; hips();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 233; knees();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 234; ankles();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 235; feet();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 236; you();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArmContext : ParserRuleContext {
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public ArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterArm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitArm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArmContext arm() {
		ArmContext _localctx = new ArmContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_arm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; side();
			State = 240; Match(9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LegContext : ParserRuleContext {
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public LegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_leg; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterLeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitLeg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LegContext leg() {
		LegContext _localctx = new LegContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_leg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; side();
			State = 243; Match(59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpineContext : ParserRuleContext {
		public SpineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_spine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterSpine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitSpine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpineContext spine() {
		SpineContext _localctx = new SpineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_spine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackContext : ParserRuleContext {
		public BackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_back; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterBack(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitBack(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackContext back() {
		BackContext _localctx = new BackContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_back);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArmsContext : ParserRuleContext {
		public ArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arms; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterArms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitArms(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArmsContext arms() {
		ArmsContext _localctx = new ArmsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_arms);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LegsContext : ParserRuleContext {
		public LegsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_legs; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterLegs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitLegs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLegs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LegsContext legs() {
		LegsContext _localctx = new LegsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_legs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShouldersContext : ParserRuleContext {
		public ShouldersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shoulders; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterShoulders(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitShoulders(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShoulders(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShouldersContext shoulders() {
		ShouldersContext _localctx = new ShouldersContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_shoulders);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WristsContext : ParserRuleContext {
		public WristsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_wrists; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterWrists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitWrists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WristsContext wrists() {
		WristsContext _localctx = new WristsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_wrists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElbowsContext : ParserRuleContext {
		public ElbowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elbows; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterElbows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitElbows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElbows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElbowsContext elbows() {
		ElbowsContext _localctx = new ElbowsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_elbows);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandsContext : ParserRuleContext {
		public HandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_hands; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterHands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitHands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandsContext hands() {
		HandsContext _localctx = new HandsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_hands);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hands_tipsContext : ParserRuleContext {
		public Hands_tipsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_hands_tips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterHands_tips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitHands_tips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHands_tips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hands_tipsContext hands_tips() {
		Hands_tipsContext _localctx = new Hands_tipsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_hands_tips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(51);
			State = 262; Match(75);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThumbsContext : ParserRuleContext {
		public ThumbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_thumbs; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterThumbs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitThumbs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThumbs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThumbsContext thumbs() {
		ThumbsContext _localctx = new ThumbsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_thumbs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HipsContext : ParserRuleContext {
		public HipsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_hips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterHips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitHips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HipsContext hips() {
		HipsContext _localctx = new HipsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_hips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(71);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KneesContext : ParserRuleContext {
		public KneesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_knees; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterKnees(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitKnees(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnees(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KneesContext knees() {
		KneesContext _localctx = new KneesContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_knees);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnklesContext : ParserRuleContext {
		public AnklesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ankles; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterAnkles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitAnkles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnkles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnklesContext ankles() {
		AnklesContext _localctx = new AnklesContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_ankles);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(64);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeetContext : ParserRuleContext {
		public FeetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_feet; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterFeet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitFeet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeetContext feet() {
		FeetContext _localctx = new FeetContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_feet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YouContext : ParserRuleContext {
		public YouContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_you; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterYou(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitYou(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYou(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YouContext you() {
		YouContext _localctx = new YouContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_you);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JointContext : ParserRuleContext {
		public Sided_jointContext sided_joint() {
			return GetRuleContext<Sided_jointContext>(0);
		}
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public Center_jointContext center_joint() {
			return GetRuleContext<Center_jointContext>(0);
		}
		public JointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_joint; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterJoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitJoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JointContext joint() {
		JointContext _localctx = new JointContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_joint);
		try {
			State = 280;
			switch (_input.La(1)) {
			case 8:
			case 19:
			case 36:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; center_joint();
				}
				break;
			case 1:
			case 72:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; side();
				State = 278; sided_joint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Center_jointContext : ParserRuleContext {
		public Center_jointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_center_joint; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterCenter_joint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitCenter_joint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCenter_joint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Center_jointContext center_joint() {
		Center_jointContext _localctx = new Center_jointContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_center_joint);
		try {
			State = 290;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282; Match(8);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; Match(19);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 284; Match(36);
				State = 285; Match(46);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; Match(36);
				State = 287; Match(62);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 288; Match(36);
				State = 289; Match(27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SideContext : ParserRuleContext {
		public SideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_side; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitSide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SideContext side() {
		SideContext _localctx = new SideContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_side);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = _input.La(1);
			if ( !(_la==1 || _la==72) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sided_jointContext : ParserRuleContext {
		public Sided_jointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sided_joint; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterSided_joint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitSided_joint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSided_joint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sided_jointContext sided_joint() {
		Sided_jointContext _localctx = new Sided_jointContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_sided_joint);
		try {
			State = 305;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; Match(27);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(14);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; Match(53);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 297; Match(7);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 298; Match(7);
				State = 299; Match(48);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 300; Match(74);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 301; Match(61);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 302; Match(33);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 303; Match(18);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 304; Match(22);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_direction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_direction);
		try {
			State = 312;
			switch (_input.La(1)) {
			case 28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; Match(28);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; Match(4);
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309; Match(67);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310; Match(30);
				}
				break;
			case 1:
			case 72:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311; side();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Angular_directionContext : ParserRuleContext {
		public Angular_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_angular_direction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterAngular_direction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitAngular_direction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAngular_direction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Angular_directionContext angular_direction() {
		Angular_directionContext _localctx = new Angular_directionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_angular_direction);
		try {
			State = 317;
			switch (_input.La(1)) {
			case 6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; Match(6);
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; Match(76);
				State = 316; Match(6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_planeContext : ParserRuleContext {
		public Reference_planeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_reference_plane; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterReference_plane(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitReference_plane(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_plane(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_planeContext reference_plane() {
		Reference_planeContext _localctx = new Reference_planeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_reference_plane);
		try {
			State = 325;
			switch (_input.La(1)) {
			case 29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; Match(29);
				State = 320; Match(73);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321; Match(57);
				State = 322; Match(73);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323; Match(32);
				State = 324; Match(73);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictionContext : ParserRuleContext {
		public DontContext dont() {
			return GetRuleContext<DontContext>(0);
		}
		public Touch_restrictionContext touch_restriction() {
			return GetRuleContext<Touch_restrictionContext>(0);
		}
		public Align_restrictionContext align_restriction() {
			return GetRuleContext<Align_restrictionContext>(0);
		}
		public Put_restrictionContext put_restriction() {
			return GetRuleContext<Put_restrictionContext>(0);
		}
		public RestrictionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_restriction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterRestriction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitRestriction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestriction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestrictionContext restriction() {
		RestrictionContext _localctx = new RestrictionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_restriction);
		int _la;
		try {
			State = 339;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				_la = _input.La(1);
				if (_la==52) {
					{
					State = 327; dont();
					}
				}

				State = 330; touch_restriction();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				_la = _input.La(1);
				if (_la==52) {
					{
					State = 331; dont();
					}
				}

				State = 334; put_restriction();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				_la = _input.La(1);
				if (_la==52) {
					{
					State = 335; dont();
					}
				}

				State = 338; align_restriction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DontContext : ParserRuleContext {
		public DontContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_dont; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterDont(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitDont(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDont(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DontContext dont() {
		DontContext _localctx = new DontContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_dont);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Touch_restrictionContext : ParserRuleContext {
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public Body_partContext body_part() {
			return GetRuleContext<Body_partContext>(0);
		}
		public Touch_restrictionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_touch_restriction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterTouch_restriction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitTouch_restriction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTouch_restriction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Touch_restrictionContext touch_restriction() {
		Touch_restrictionContext _localctx = new Touch_restrictionContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_touch_restriction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(68);
			State = 345;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 344; Match(3);
				}
			}

			State = 347; body_part();
			State = 348; Match(66);
			State = 350;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 349; Match(3);
				}
			}

			State = 352; side();
			State = 353; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Put_restrictionContext : ParserRuleContext {
		public IReadOnlyList<Body_partContext> body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		public Relative_directionContext relative_direction() {
			return GetRuleContext<Relative_directionContext>(0);
		}
		public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public Put_restrictionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_put_restriction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterPut_restriction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitPut_restriction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPut_restriction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Put_restrictionContext put_restriction() {
		Put_restrictionContext _localctx = new Put_restrictionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_put_restriction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(44);
			State = 357;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 356; Match(3);
				}
			}

			State = 359; body_part();
			State = 375;
			_la = _input.La(1);
			if (_la==40 || _la==49) {
				{
				State = 367;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 360; Match(40);
					State = 362;
					_la = _input.La(1);
					if (_la==3) {
						{
						State = 361; Match(3);
						}
					}

					State = 364; body_part();
					}
					}
					State = 369;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 370; Match(49);
				State = 372;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 371; Match(3);
					}
				}

				State = 374; body_part();
				}
			}

			State = 377; relative_direction();
			State = 378; body_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Align_restrictionContext : ParserRuleContext {
		public IReadOnlyList<Body_partContext> body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public Align_restrictionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_align_restriction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterAlign_restriction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitAlign_restriction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlign_restriction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Align_restrictionContext align_restriction() {
		Align_restrictionContext _localctx = new Align_restrictionContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_align_restriction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(50);
			State = 382;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 381; Match(3);
				}
			}

			State = 384; body_part();
			State = 400;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 392;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 385; Match(40);
					State = 387;
					_la = _input.La(1);
					if (_la==3) {
						{
						State = 386; Match(3);
						}
					}

					State = 389; body_part();
					}
					}
					State = 394;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 395; Match(49);
				State = 397;
				_la = _input.La(1);
				if (_la==3) {
					{
					State = 396; Match(3);
					}
				}

				State = 399; body_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relative_directionContext : ParserRuleContext {
		public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public Relative_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relative_direction; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterRelative_direction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitRelative_direction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelative_direction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relative_directionContext relative_direction() {
		Relative_directionContext _localctx = new Relative_directionContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_relative_direction);
		try {
			State = 423;
			switch (_input.La(1)) {
			case 38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402; Match(38);
				State = 403; Match(67);
				State = 404; Match(41);
				State = 405; Match(3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(5);
				State = 407; Match(3);
				}
				break;
			case 16:
			case 65:
				EnterOuterAlt(_localctx, 3);
				{
				State = 412;
				switch (_input.La(1)) {
				case 16:
					{
					{
					State = 408; Match(16);
					State = 409; Match(69);
					State = 410; Match(41);
					}
					}
					break;
				case 65:
					{
					State = 411; Match(65);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 414; Match(3);
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 4);
				{
				State = 415; Match(70);
				State = 416; Match(3);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 417; Match(10);
				State = 418; Match(56);
				State = 419; side();
				State = 420; Match(41);
				State = 421; Match(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutionContext : ParserRuleContext {
		public Execution_stepContext execution_step(int i) {
			return GetRuleContext<Execution_stepContext>(i);
		}
		public IReadOnlyList<Execution_stepContext> execution_step() {
			return GetRuleContexts<Execution_stepContext>();
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PreposeGesturesParser.NUMBER, 0); }
		public ExecutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_execution; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterExecution(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitExecution(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutionContext execution() {
		ExecutionContext _localctx = new ExecutionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_execution);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(17);
			State = 426; Match(42);
			State = 448;
			switch (_input.La(1)) {
			case 25:
				{
				State = 427; repeat();
				State = 428; Match(56);
				State = 429; Match(11);
				State = 430; Match(24);
				State = 431; Match(NUMBER);
				State = 432; execution_step();
				State = 437;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 433; Match(40);
					State = 434; execution_step();
					}
					}
					State = 439;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case 39:
			case 43:
			case ID:
				{
				State = 440; execution_step();
				State = 445;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 441; Match(40);
					State = 442; execution_step();
					}
					}
					State = 447;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execution_stepContext : ParserRuleContext {
		public Motion_constraintContext motion_constraint() {
			return GetRuleContext<Motion_constraintContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PreposeGesturesParser.ID, 0); }
		public Hold_constraintContext hold_constraint() {
			return GetRuleContext<Hold_constraintContext>(0);
		}
		public Execution_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_execution_step; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterExecution_step(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitExecution_step(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecution_step(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execution_stepContext execution_step() {
		Execution_stepContext _localctx = new Execution_stepContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_execution_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = _input.La(1);
			if (_la==39 || _la==43) {
				{
				State = 450; motion_constraint();
				}
			}

			State = 453; Match(ID);
			State = 456;
			_la = _input.La(1);
			if (_la==49) {
				{
				State = 454; Match(49);
				State = 455; hold_constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Motion_constraintContext : ParserRuleContext {
		public Motion_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_motion_constraint; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterMotion_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitMotion_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMotion_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Motion_constraintContext motion_constraint() {
		Motion_constraintContext _localctx = new Motion_constraintContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_motion_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = _input.La(1);
			if ( !(_la==39 || _la==43) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hold_constraintContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PreposeGesturesParser.NUMBER, 0); }
		public Hold_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_hold_constraint; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterHold_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitHold_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHold_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hold_constraintContext hold_constraint() {
		Hold_constraintContext _localctx = new Hold_constraintContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_hold_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(12);
			State = 461; Match(58);
			State = 462; Match(NUMBER);
			State = 463; Match(21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PreposeGesturesParser.NUMBER, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_repeat; }
		public override void EnterRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreposeGesturesListener typedListener = listener as IPreposeGesturesListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreposeGesturesVisitor<TResult> typedVisitor = visitor as IPreposeGesturesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(25);
			State = 466; Match(NUMBER);
			State = 467; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3T\x1D8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\x61\n"+
		"\x2\r\x2\xE\x2\x62\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3k\n\x3\r\x3"+
		"\xE\x3l\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4w\n\x4\f\x4"+
		"\xE\x4z\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5\x80\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x85\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x8C\n\a\x3\a\a\a\x8F\n\a"+
		"\f\a\xE\a\x92\v\a\x3\a\x3\a\x5\a\x96\n\a\x3\a\x5\a\x99\n\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x5\a\xA0\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA9"+
		"\n\b\x3\b\a\b\xAC\n\b\f\b\xE\b\xAF\v\b\x3\b\x3\b\x5\b\xB3\n\b\x3\b\x5"+
		"\b\xB6\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xBD\n\b\x3\b\x3\b\x3\t\x3\t\x5"+
		"\t\xC3\n\t\x3\t\x3\t\x3\t\x5\t\xC8\n\t\x3\t\a\t\xCB\n\t\f\t\xE\t\xCE\v"+
		"\t\x3\t\x3\t\x5\t\xD2\n\t\x3\t\x5\t\xD5\n\t\x3\t\x3\t\x3\t\x5\t\xDA\n"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xF0\n\n\x3\v\x3\v\x3\v\x3\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x11B\n\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x125\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x134\n\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x13B\n \x3!\x3!\x3!\x5"+
		"!\x140\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x148\n\"\x3#\x5#\x14B\n#"+
		"\x3#\x3#\x5#\x14F\n#\x3#\x3#\x5#\x153\n#\x3#\x5#\x156\n#\x3$\x3$\x3%\x3"+
		"%\x5%\x15C\n%\x3%\x3%\x3%\x5%\x161\n%\x3%\x3%\x3%\x3&\x3&\x5&\x168\n&"+
		"\x3&\x3&\x3&\x5&\x16D\n&\x3&\a&\x170\n&\f&\xE&\x173\v&\x3&\x3&\x5&\x177"+
		"\n&\x3&\x5&\x17A\n&\x3&\x3&\x3&\x3\'\x3\'\x5\'\x181\n\'\x3\'\x3\'\x3\'"+
		"\x5\'\x186\n\'\x3\'\a\'\x189\n\'\f\'\xE\'\x18C\v\'\x3\'\x3\'\x5\'\x190"+
		"\n\'\x3\'\x5\'\x193\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x19F"+
		"\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x1AA\n(\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\a)\x1B6\n)\f)\xE)\x1B9\v)\x3)\x3)\x3)\a)\x1BE\n"+
		")\f)\xE)\x1C1\v)\x5)\x1C3\n)\x3*\x5*\x1C6\n*\x3*\x3*\x3*\x5*\x1CB\n*\x3"+
		"+\x3+\x3,\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x2\x2\x2.\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T"+
		"\x2V\x2X\x2\x2\x4\x4\x2\x3\x3JJ\x4\x2))--\x204\x2Z\x3\x2\x2\x2\x4\x66"+
		"\x3\x2\x2\x2\x6p\x3\x2\x2\x2\b\x7F\x3\x2\x2\x2\n\x84\x3\x2\x2\x2\f\x86"+
		"\x3\x2\x2\x2\xE\xA3\x3\x2\x2\x2\x10\xC0\x3\x2\x2\x2\x12\xEF\x3\x2\x2\x2"+
		"\x14\xF1\x3\x2\x2\x2\x16\xF4\x3\x2\x2\x2\x18\xF7\x3\x2\x2\x2\x1A\xF9\x3"+
		"\x2\x2\x2\x1C\xFB\x3\x2\x2\x2\x1E\xFD\x3\x2\x2\x2 \xFF\x3\x2\x2\x2\"\x101"+
		"\x3\x2\x2\x2$\x103\x3\x2\x2\x2&\x105\x3\x2\x2\x2(\x107\x3\x2\x2\x2*\x10A"+
		"\x3\x2\x2\x2,\x10C\x3\x2\x2\x2.\x10E\x3\x2\x2\x2\x30\x110\x3\x2\x2\x2"+
		"\x32\x112\x3\x2\x2\x2\x34\x114\x3\x2\x2\x2\x36\x11A\x3\x2\x2\x2\x38\x124"+
		"\x3\x2\x2\x2:\x126\x3\x2\x2\x2<\x133\x3\x2\x2\x2>\x13A\x3\x2\x2\x2@\x13F"+
		"\x3\x2\x2\x2\x42\x147\x3\x2\x2\x2\x44\x155\x3\x2\x2\x2\x46\x157\x3\x2"+
		"\x2\x2H\x159\x3\x2\x2\x2J\x165\x3\x2\x2\x2L\x17E\x3\x2\x2\x2N\x1A9\x3"+
		"\x2\x2\x2P\x1AB\x3\x2\x2\x2R\x1C5\x3\x2\x2\x2T\x1CC\x3\x2\x2\x2V\x1CE"+
		"\x3\x2\x2\x2X\x1D3\x3\x2\x2\x2Z[\a$\x2\x2[\\\aS\x2\x2\\`\a,\x2\x2]^\x5"+
		"\x4\x3\x2^ \a\x38\x2\x2_\x61\x3\x2\x2\x2`]\x3\x2\x2\x2\x61\x62\x3\x2\x2"+
		"\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\a"+
		"\x2\x2\x3\x65\x3\x3\x2\x2\x2\x66g\a\x19\x2\x2gh\aS\x2\x2hj\a,\x2\x2ik"+
		"\x5\x6\x4\x2ji\x3\x2\x2\x2kl\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2m"+
		"n\x3\x2\x2\x2no\x5P)\x2o\x5\x3\x2\x2\x2pq\a\x31\x2\x2qr\aS\x2\x2rs\a,"+
		"\x2\x2sx\x5\b\x5\x2tu\a*\x2\x2uw\x5\b\x5\x2vt\x3\x2\x2\x2wz\x3\x2\x2\x2"+
		"xv\x3\x2\x2\x2xy\x3\x2\x2\x2y{\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a\x38\x2\x2"+
		"|\a\x3\x2\x2\x2}\x80\x5\n\x6\x2~\x80\x5\x44#\x2\x7F}\x3\x2\x2\x2\x7F~"+
		"\x3\x2\x2\x2\x80\t\x3\x2\x2\x2\x81\x85\x5\x10\t\x2\x82\x85\x5\f\a\x2\x83"+
		"\x85\x5\xE\b\x2\x84\x81\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x83\x3\x2"+
		"\x2\x2\x85\v\x3\x2\x2\x2\x86\x87\a\x1C\x2\x2\x87\x88\a\x5\x2\x2\x88\x98"+
		"\x5\x12\n\x2\x89\x8B\a*\x2\x2\x8A\x8C\a\x5\x2\x2\x8B\x8A\x3\x2\x2\x2\x8B"+
		"\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x5\x12\n\x2\x8E\x89\x3\x2"+
		"\x2\x2\x8F\x92\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91"+
		"\x93\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x93\x95\a\x33\x2\x2\x94\x96\a\x5"+
		"\x2\x2\x95\x94\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97"+
		"\x99\x5\x12\n\x2\x98\x90\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\x3\x2"+
		"\x2\x2\x9A\x9B\aP\x2\x2\x9B\x9C\a%\x2\x2\x9C\x9D\x5@!\x2\x9D\x9F\a\x12"+
		"\x2\x2\x9E\xA0\a:\x2\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1"+
		"\x3\x2\x2\x2\xA1\xA2\x5\x42\"\x2\xA2\r\x3\x2\x2\x2\xA3\xA4\a\x1C\x2\x2"+
		"\xA4\xA5\a\x5\x2\x2\xA5\xB5\x5\x12\n\x2\xA6\xA8\a*\x2\x2\xA7\xA9\a\x5"+
		"\x2\x2\xA8\xA7\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA"+
		"\xAC\x5\x12\n\x2\xAB\xA6\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2"+
		"\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0"+
		"\xB2\a\x33\x2\x2\xB1\xB3\a\x5\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2"+
		"\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6\x5\x12\n\x2\xB5\xAD\x3\x2\x2\x2\xB5"+
		"\xB6\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\aP\x2\x2\xB8\xBC\a%\x2\x2"+
		"\xB9\xBD\a\f\x2\x2\xBA\xBB\a\f\x2\x2\xBB\xBD\a\x5\x2\x2\xBC\xB9\x3\x2"+
		"\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE"+
		"\xBF\x5> \x2\xBF\xF\x3\x2\x2\x2\xC0\xC2\aO\x2\x2\xC1\xC3\a\x5\x2\x2\xC2"+
		"\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xD4\x5\x12"+
		"\n\x2\xC5\xC7\a*\x2\x2\xC6\xC8\a\x5\x2\x2\xC7\xC6\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x5\x12\n\x2\xCA\xC5\x3\x2\x2"+
		"\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF"+
		"\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1\a\x33\x2\x2\xD0\xD2\a\x5\x2\x2"+
		"\xD1\xD0\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD5\x5"+
		"\x12\n\x2\xD4\xCC\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD9\x3\x2\x2\x2"+
		"\xD6\xDA\a\f\x2\x2\xD7\xD8\a\f\x2\x2\xD8\xDA\a\x5\x2\x2\xD9\xD6\x3\x2"+
		"\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB"+
		"\xDC\x5> \x2\xDC\x11\x3\x2\x2\x2\xDD\xF0\x5\x36\x1C\x2\xDE\xF0\x5\x14"+
		"\v\x2\xDF\xF0\x5\x16\f\x2\xE0\xF0\x5\x18\r\x2\xE1\xF0\x5\x1A\xE\x2\xE2"+
		"\xF0\x5\x1C\xF\x2\xE3\xF0\x5\x1E\x10\x2\xE4\xF0\x5 \x11\x2\xE5\xF0\x5"+
		"\"\x12\x2\xE6\xF0\x5$\x13\x2\xE7\xF0\x5&\x14\x2\xE8\xF0\x5(\x15\x2\xE9"+
		"\xF0\x5*\x16\x2\xEA\xF0\x5,\x17\x2\xEB\xF0\x5.\x18\x2\xEC\xF0\x5\x30\x19"+
		"\x2\xED\xF0\x5\x32\x1A\x2\xEE\xF0\x5\x34\x1B\x2\xEF\xDD\x3\x2\x2\x2\xEF"+
		"\xDE\x3\x2\x2\x2\xEF\xDF\x3\x2\x2\x2\xEF\xE0\x3\x2\x2\x2\xEF\xE1\x3\x2"+
		"\x2\x2\xEF\xE2\x3\x2\x2\x2\xEF\xE3\x3\x2\x2\x2\xEF\xE4\x3\x2\x2\x2\xEF"+
		"\xE5\x3\x2\x2\x2\xEF\xE6\x3\x2\x2\x2\xEF\xE7\x3\x2\x2\x2\xEF\xE8\x3\x2"+
		"\x2\x2\xEF\xE9\x3\x2\x2\x2\xEF\xEA\x3\x2\x2\x2\xEF\xEB\x3\x2\x2\x2\xEF"+
		"\xEC\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xF0\x13\x3\x2"+
		"\x2\x2\xF1\xF2\x5:\x1E\x2\xF2\xF3\a\v\x2\x2\xF3\x15\x3\x2\x2\x2\xF4\xF5"+
		"\x5:\x1E\x2\xF5\xF6\a=\x2\x2\xF6\x17\x3\x2\x2\x2\xF7\xF8\a&\x2\x2\xF8"+
		"\x19\x3\x2\x2\x2\xF9\xFA\a \x2\x2\xFA\x1B\x3\x2\x2\x2\xFB\xFC\a\'\x2\x2"+
		"\xFC\x1D\x3\x2\x2\x2\xFD\xFE\a!\x2\x2\xFE\x1F\x3\x2\x2\x2\xFF\x100\a\x4"+
		"\x2\x2\x100!\x3\x2\x2\x2\x101\x102\a\x16\x2\x2\x102#\x3\x2\x2\x2\x103"+
		"\x104\a\x41\x2\x2\x104%\x3\x2\x2\x2\x105\x106\a\x35\x2\x2\x106\'\x3\x2"+
		"\x2\x2\x107\x108\a\x35\x2\x2\x108\x109\aM\x2\x2\x109)\x3\x2\x2\x2\x10A"+
		"\x10B\a/\x2\x2\x10B+\x3\x2\x2\x2\x10C\x10D\aI\x2\x2\x10D-\x3\x2\x2\x2"+
		"\x10E\x10F\a>\x2\x2\x10F/\x3\x2\x2\x2\x110\x111\a\x42\x2\x2\x111\x31\x3"+
		"\x2\x2\x2\x112\x113\a\x11\x2\x2\x113\x33\x3\x2\x2\x2\x114\x115\a\x39\x2"+
		"\x2\x115\x35\x3\x2\x2\x2\x116\x11B\x5\x38\x1D\x2\x117\x118\x5:\x1E\x2"+
		"\x118\x119\x5<\x1F\x2\x119\x11B\x3\x2\x2\x2\x11A\x116\x3\x2\x2\x2\x11A"+
		"\x117\x3\x2\x2\x2\x11B\x37\x3\x2\x2\x2\x11C\x125\a\n\x2\x2\x11D\x125\a"+
		"\x15\x2\x2\x11E\x11F\a&\x2\x2\x11F\x125\a\x30\x2\x2\x120\x121\a&\x2\x2"+
		"\x121\x125\a@\x2\x2\x122\x123\a&\x2\x2\x123\x125\a\x1D\x2\x2\x124\x11C"+
		"\x3\x2\x2\x2\x124\x11D\x3\x2\x2\x2\x124\x11E\x3\x2\x2\x2\x124\x120\x3"+
		"\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x39\x3\x2\x2\x2\x126\x127\t\x2\x2"+
		"\x2\x127;\x3\x2\x2\x2\x128\x134\a\x1D\x2\x2\x129\x134\a\x10\x2\x2\x12A"+
		"\x134\a\x37\x2\x2\x12B\x134\a\t\x2\x2\x12C\x12D\a\t\x2\x2\x12D\x134\a"+
		"\x32\x2\x2\x12E\x134\aL\x2\x2\x12F\x134\a?\x2\x2\x130\x134\a#\x2\x2\x131"+
		"\x134\a\x14\x2\x2\x132\x134\a\x18\x2\x2\x133\x128\x3\x2\x2\x2\x133\x129"+
		"\x3\x2\x2\x2\x133\x12A\x3\x2\x2\x2\x133\x12B\x3\x2\x2\x2\x133\x12C\x3"+
		"\x2\x2\x2\x133\x12E\x3\x2\x2\x2\x133\x12F\x3\x2\x2\x2\x133\x130\x3\x2"+
		"\x2\x2\x133\x131\x3\x2\x2\x2\x133\x132\x3\x2\x2\x2\x134=\x3\x2\x2\x2\x135"+
		"\x13B\a\x1E\x2\x2\x136\x13B\a\x6\x2\x2\x137\x13B\a\x45\x2\x2\x138\x13B"+
		"\a \x2\x2\x139\x13B\x5:\x1E\x2\x13A\x135\x3\x2\x2\x2\x13A\x136\x3\x2\x2"+
		"\x2\x13A\x137\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13A\x139\x3\x2\x2\x2"+
		"\x13B?\x3\x2\x2\x2\x13C\x140\a\b\x2\x2\x13D\x13E\aN\x2\x2\x13E\x140\a"+
		"\b\x2\x2\x13F\x13C\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x140\x41\x3\x2\x2"+
		"\x2\x141\x142\a\x1F\x2\x2\x142\x148\aK\x2\x2\x143\x144\a;\x2\x2\x144\x148"+
		"\aK\x2\x2\x145\x146\a\"\x2\x2\x146\x148\aK\x2\x2\x147\x141\x3\x2\x2\x2"+
		"\x147\x143\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x148\x43\x3\x2\x2\x2\x149"+
		"\x14B\x5\x46$\x2\x14A\x149\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14C"+
		"\x3\x2\x2\x2\x14C\x156\x5H%\x2\x14D\x14F\x5\x46$\x2\x14E\x14D\x3\x2\x2"+
		"\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x156\x5J&\x2\x151"+
		"\x153\x5\x46$\x2\x152\x151\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154"+
		"\x3\x2\x2\x2\x154\x156\x5L\'\x2\x155\x14A\x3\x2\x2\x2\x155\x14E\x3\x2"+
		"\x2\x2\x155\x152\x3\x2\x2\x2\x156\x45\x3\x2\x2\x2\x157\x158\a\x36\x2\x2"+
		"\x158G\x3\x2\x2\x2\x159\x15B\a\x46\x2\x2\x15A\x15C\a\x5\x2\x2\x15B\x15A"+
		"\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x5"+
		"\x12\n\x2\x15E\x160\a\x44\x2\x2\x15F\x161\a\x5\x2\x2\x160\x15F\x3\x2\x2"+
		"\x2\x160\x161\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x163\x5:\x1E\x2\x163"+
		"\x164\a\t\x2\x2\x164I\x3\x2\x2\x2\x165\x167\a.\x2\x2\x166\x168\a\x5\x2"+
		"\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2"+
		"\x169\x179\x5\x12\n\x2\x16A\x16C\a*\x2\x2\x16B\x16D\a\x5\x2\x2\x16C\x16B"+
		"\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x170\x5"+
		"\x12\n\x2\x16F\x16A\x3\x2\x2\x2\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2"+
		"\x2\x2\x171\x172\x3\x2\x2\x2\x172\x174\x3\x2\x2\x2\x173\x171\x3\x2\x2"+
		"\x2\x174\x176\a\x33\x2\x2\x175\x177\a\x5\x2\x2\x176\x175\x3\x2\x2\x2\x176"+
		"\x177\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17A\x5\x12\n\x2\x179\x171"+
		"\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C\x5"+
		"N(\x2\x17C\x17D\x5\x12\n\x2\x17DK\x3\x2\x2\x2\x17E\x180\a\x34\x2\x2\x17F"+
		"\x181\a\x5\x2\x2\x180\x17F\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182"+
		"\x3\x2\x2\x2\x182\x192\x5\x12\n\x2\x183\x185\a*\x2\x2\x184\x186\a\x5\x2"+
		"\x2\x185\x184\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2"+
		"\x187\x189\x5\x12\n\x2\x188\x183\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2\x18A"+
		"\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C\x18A"+
		"\x3\x2\x2\x2\x18D\x18F\a\x33\x2\x2\x18E\x190\a\x5\x2\x2\x18F\x18E\x3\x2"+
		"\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x193\x5\x12\n"+
		"\x2\x192\x18A\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193M\x3\x2\x2\x2\x194"+
		"\x195\a(\x2\x2\x195\x196\a\x45\x2\x2\x196\x197\a+\x2\x2\x197\x1AA\a\x5"+
		"\x2\x2\x198\x199\a\a\x2\x2\x199\x1AA\a\x5\x2\x2\x19A\x19B\a\x12\x2\x2"+
		"\x19B\x19C\aG\x2\x2\x19C\x19F\a+\x2\x2\x19D\x19F\a\x43\x2\x2\x19E\x19A"+
		"\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1AA\a\x5"+
		"\x2\x2\x1A1\x1A2\aH\x2\x2\x1A2\x1AA\a\x5\x2\x2\x1A3\x1A4\a\f\x2\x2\x1A4"+
		"\x1A5\a:\x2\x2\x1A5\x1A6\x5:\x1E\x2\x1A6\x1A7\a+\x2\x2\x1A7\x1A8\a\x5"+
		"\x2\x2\x1A8\x1AA\x3\x2\x2\x2\x1A9\x194\x3\x2\x2\x2\x1A9\x198\x3\x2\x2"+
		"\x2\x1A9\x19E\x3\x2\x2\x2\x1A9\x1A1\x3\x2\x2\x2\x1A9\x1A3\x3\x2\x2\x2"+
		"\x1AAO\x3\x2\x2\x2\x1AB\x1AC\a\x13\x2\x2\x1AC\x1C2\a,\x2\x2\x1AD\x1AE"+
		"\x5X-\x2\x1AE\x1AF\a:\x2\x2\x1AF\x1B0\a\r\x2\x2\x1B0\x1B1\a\x1A\x2\x2"+
		"\x1B1\x1B2\aP\x2\x2\x1B2\x1B7\x5R*\x2\x1B3\x1B4\a*\x2\x2\x1B4\x1B6\x5"+
		"R*\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B9\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2"+
		"\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1C3\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA"+
		"\x1BF\x5R*\x2\x1BB\x1BC\a*\x2\x2\x1BC\x1BE\x5R*\x2\x1BD\x1BB\x3\x2\x2"+
		"\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2"+
		"\x1C0\x1C3\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C2\x1AD\x3\x2\x2\x2\x1C2"+
		"\x1BA\x3\x2\x2\x2\x1C3Q\x3\x2\x2\x2\x1C4\x1C6\x5T+\x2\x1C5\x1C4\x3\x2"+
		"\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1CA\aS\x2\x2"+
		"\x1C8\x1C9\a\x33\x2\x2\x1C9\x1CB\x5V,\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB"+
		"\x3\x2\x2\x2\x1CBS\x3\x2\x2\x2\x1CC\x1CD\t\x3\x2\x2\x1CDU\x3\x2\x2\x2"+
		"\x1CE\x1CF\a\xE\x2\x2\x1CF\x1D0\a<\x2\x2\x1D0\x1D1\aP\x2\x2\x1D1\x1D2"+
		"\a\x17\x2\x2\x1D2W\x3\x2\x2\x2\x1D3\x1D4\a\x1B\x2\x2\x1D4\x1D5\aP\x2\x2"+
		"\x1D5\x1D6\a\xF\x2\x2\x1D6Y\x3\x2\x2\x2\x35\x62lx\x7F\x84\x8B\x90\x95"+
		"\x98\x9F\xA8\xAD\xB2\xB5\xBC\xC2\xC7\xCC\xD1\xD4\xD9\xEF\x11A\x124\x133"+
		"\x13A\x13F\x147\x14A\x14E\x152\x155\x15B\x160\x167\x16C\x171\x176\x179"+
		"\x180\x185\x18A\x18F\x192\x19E\x1A9\x1B7\x1BF\x1C2\x1C5\x1CA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreposeGestures
